{"meta":{"title":"happylzyy's blog","subtitle":"","description":"","author":"Zhaoyang Liu","url":"http://happylzyy.github.io","root":"/"},"pages":[{"title":"关于","date":"2021-02-27T17:32:50.577Z","updated":"2021-02-27T17:32:50.577Z","comments":false,"path":"about/index.html","permalink":"http://happylzyy.github.io/about/index.html","excerpt":"","text":"2017.09–2021.09就读于东北大学秦皇岛分校测控技术与仪器专业 喜欢看电影、看小说。 下面是公式渲染测试： ∮lH⋅dl=∫sJ⋅ds+∫s∂D∂t⋅ds\\oint_{l}H\\cdot\\mathbf{d}l=\\int_{s}J\\cdot\\mathbf{d}s+\\int_{s} \\frac{\\partial D}{\\partial t}\\cdot\\mathbf{d}s ∮​l​​H⋅dl=∫​s​​J⋅ds+∫​s​​​∂t​​∂D​​⋅ds ∮lE⋅dl=−∫s∂B∂t⋅ds\\oint_{l}E\\cdot\\mathbf{d}l=-\\int_{s}\\frac{\\partial B}{\\partial t}\\cdot\\mathbf{d}s ∮​l​​E⋅dl=−∫​s​​​∂t​​∂B​​⋅ds ∮sB⋅ds=0\\oint_{s}B\\cdot\\mathbf{d}s=0 ∮​s​​B⋅ds=0 ∮sD⋅ds=∫vρ⋅dv\\oint_{s}D\\cdot\\mathbf{d}s=\\int_{v}\\rho\\cdot\\mathbf{d}v ∮​s​​D⋅ds=∫​v​​ρ⋅dv H=−∑i=1N(σixσi+1x+gσiz)H=-\\sum_{i=1}^N (\\sigma_{i}^x \\sigma_{i+1}^x+g \\sigma_{i}^z) H=−​i=1​∑​N​​(σ​i​x​​σ​i+1​x​​+gσ​i​z​​) f(n)={n2,if n is even3n+1,if n is oddf(n) = \\begin{cases} \\frac{n}{2}, &amp; \\text{if } n\\text{ is even} \\\\ 3n+1, &amp; \\text{if } n\\text{ is odd} \\end{cases} f(n)={​​2​​n​​,​3n+1,​​​if n is even​if n is odd​​ 行内公式 E=mc2E = mc^2E=mc​2​​ 这世上一定存在着善良，值得我们奋战到底。 J.R.R. Tolkien-- The Lord of the Ring"},{"title":"书单","date":"2021-02-27T16:05:08.267Z","updated":"2021-02-27T15:42:26.304Z","comments":false,"path":"books/index.html","permalink":"http://happylzyy.github.io/books/index.html","excerpt":"","text":""},{"title":"Categories","date":"2021-02-27T14:57:37.144Z","updated":"2020-06-04T02:06:51.871Z","comments":false,"path":"categories/index.html","permalink":"http://happylzyy.github.io/categories/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2021-02-27T16:04:24.031Z","updated":"2021-02-27T15:42:26.304Z","comments":false,"path":"repository/index.html","permalink":"http://happylzyy.github.io/repository/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2021-02-27T16:06:14.214Z","updated":"2021-02-27T15:42:26.304Z","comments":true,"path":"links/index.html","permalink":"http://happylzyy.github.io/links/index.html","excerpt":"","text":""},{"title":"Tags","date":"2021-02-27T14:57:37.151Z","updated":"2020-06-04T05:43:37.890Z","comments":false,"path":"tags/index.html","permalink":"http://happylzyy.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Hello World","slug":"hello-world","date":"2021-02-27T14:23:04.144Z","updated":"2021-02-27T14:23:04.144Z","comments":true,"path":"2021/02/27/hello-world/","link":"","permalink":"http://happylzyy.github.io/2021/02/27/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick Start Create a new post 1$ hexo new &quot;My New Post&quot; More info: Writing Run server 1$ hexo server More info: Server Generate static files 1$ hexo generate More info: Generating Deploy to remote sites 1$ hexo deploy More info: Deployment","categories":[],"tags":[]},{"title":"Linux操作系统原理与应用","slug":"linux","date":"2020-11-06T15:24:35.000Z","updated":"2021-03-28T12:15:05.480Z","comments":true,"path":"2020/11/06/linux/","link":"","permalink":"http://happylzyy.github.io/2020/11/06/linux/","excerpt":"","text":"HulGodhel 于 2020.11.06 操作系统概述 认识操作系统 可以从不同的角度来认识操作系统。 从使用者的角度，操作系统使得计算机易于使用； 比如执行文件复制操作cp dir1/a.tzt dir2/b.txt过程中，首先，文件的概念是从操作系统中抽象出来的，没有文件，就必须指定数据的具体物理位置，如柱头磁道扇区等等，其次，复杂的IO操作也由操作系统完成，最后，命令的执行还涉及到其他的复杂操作，这些繁琐的事务完全由操作系统处理。 操作系统图形化的界面也使得计算机易于使用。 从程序员角度，操作系统把软件开发人员从与硬件打交道的繁琐事务中解放出来； 编程的过程中不必关心实现的细节，可以直接调用系统API实现相关功能。操作系统是程序与硬件之间的桥梁，任何程序的运行只有借助操作系统才能顺利完成，操作系统是应用程序运行d基础设施。 从设计者的角度，操作系统可以对计算机系统中的各种软、硬件资源进行有效的管理。 为了对软硬件资源进行有效的管理，操作系统必须包含以下几个部分： 操作系统接口 CPU管理 内存管理 设备管理 文件管理 综上， 操作系统是计算机系统中的一个系统软件，是一些程序模块的集合——他们尽可能以有效、合理的方式组织和管理计算机的软、硬件资源，合理地组织计算机的工作流程，控制程序的执行，并向用户提供各种服务功能，使得用户能够灵活、方便、有效地使用计算机，使整个计算机系统能高效、舒畅地运行。 操作系统的发展 操作系统的演变 单道批处理系统 串行执行预先组织好的一组任务，IO操作时CPU等待数据传输完成，浪费时间。 多道批处理系统 处理器可以交错运行多个程序。 分时系统 将处理器的运行时间分成数片，平均或者依照一定的权重分发给系统中的各用户使用。 硬件发展轨迹 机械–电子管–晶体管–集成电路–大规模集成电路 软件发展轨迹 无软件–系统雏形–操作系统理论成型–现代操作系统–网络时代–开源软件时代 单内核与微内核 单内核，集中式操作系统，系统是个大模块，可分为若干逻辑模块，模块间以函数直接调用为交互。优点是内部调用效率高，缺点是各模块之间界限不特别清晰，系统升级或修改时牵一发而动全身，较难维护。 微内核，将操作系统中内存管理、设备管理等高级服务功能尽可能从内核中分离出来，使内核简洁可靠。优点是 充分的模块化，方便第三方开发和设计模块。 未被使用的模块可以不必运行。 具有很高的可移植性。 缺点是各模块与微内核之间通过通信机制交互，系统运行效率低。微内核是面向对象理论在操作系统设计中应用的产物。 Unix/Linux操作系统 1969年 Ken Thompson 和 Dennis M. Ritchie 开发 Unix 1990年 Linus Torvalds 开发 Linux 操作系统标准POSIX POSIX（可移植操作系统接口）由IEEE制定，由 ISO 接受为国际标准。其中POSIX 1003.1标准定义了一个最小的Unix操作系统接口，任何系统只有符合这个标准，才有可能运行Unix程序。 GNU和Linux GNU（GNU is Not Unix）是自由软件基金会的一个项目，该项目的目标是开发一个自由的Unix版本HURD。 Linux的开发使用了很多GNU工具，Linux内核、GNU工具以及其他一些自由软件组成了人们常说的Linux系统或Linux发行版。 Linux 开发模式 开放与协作的开发模式，发挥集体智慧，减少重复劳动，经历了各种各样的测试和考验，具有很好的稳定性。 Linux内核 Linux内核不是孤立的，需要放在整个系统中去研究。Linux系统由四部分组成： 用户进程 系统调用接口 系统调用是内核代码的一部分 Linux内核 硬件 Linux内核包含了系统调用接口和内核子系统。从程序员的角度，内核提供了一个与计算机硬件等价的、 扩展或虚拟的计算平台，它抽象了许多硬件细节，使程序能够按照某种统一的方式进行数据处理。从用户角度讲，内核是一个资源管理者，用户可以以某种易于理解的方式组织自己的数据。 Linux内核子系统 Linux内核除了系统调用之外，由以下5个主要的子系统组成： 进程调度 Linux使用了比较简单的、基于优先级和时间片的进程调度算法。 内存管理 支持虚拟内存，因为虚拟内存管理需要硬件支持，所以内存管理分为硬件无关部分和硬件相关部分。 虚拟文件系统 网络 进程间通信（IPC） 处于中心地位的是进程调度。 Linux内核源代码 版本号格式：x.y.z 第二位为偶数则为产品化版本，第二位为奇数则为实验版本，实验版本最初是产品化版本的副本；产品化版本只修改错误，实验版本继续增加新功能，到实验版本经测试稳定后再复制生成新的产品化版本。 Linux内核源代码位于/user/src/linux目录下，每个目录或子目录可以看作一个模块（结构化程序设计） include/建立内核代码所需的大部分包含文件 init/内核的初始化代码，这是内核工作的起点 arch/包含Linux支持的所有硬件结构的内核代码 drivers/内核中所有的设备驱动程序 fs/所有文件系统的代码 net/关于网络的代码 mm/所有内存管理代码 ipc/进程间通信的代码 kernel/主内核代码 内存寻址 Linux的设计中，它把与硬件相关的代码全部放到了arch目录下，对于众多的硬件平台，大家最熟悉的就是i386，即 Intel 80386 的体系结构。 内存寻址简介 Alan Turing 设想了一种结构简单但运算能力几乎无限强大的机器，它由控制器、读写头和一段假设无限长的带子组成。工作带相当于存储器，被划分成为大小相同的小格子，每个格子可以写一个字母，读写头可以在带子上随意移动，而控制器可以要求读写头读取下方的工作带上的字母。这种“数据连续存储和选择读取”的思想是目前人们使用的几乎所有机器运行机制的灵魂。计算机体系结构的核心问题之一就是如何有效地进行内存寻址。 Intel公司发明的8086处理器是16位的，它的设计寻址目标是1MB的内存空间，所以地址总线扩展到了20位，如何将16位地址映射到20位的地址空间，Intel公司设计了一个非常巧妙的方法，分段的方法。 8086处理器中设置了四个段寄存器：CS、DS、SS、ES，分别用于可执行代码段、 数据段、堆栈段及扩展段。每个段寄存器都是16位的，每条“访内”指令中的内部地址也是16位的，访问内存时，CPU自动地将内部地址与某个段寄存器的内容相加，即段寄存器左移4位加偏移地址，从而将16位地址映射到20位地址。 1982年，Intel 80286问世，他的地址空间长度增加到了24位，并且引入了保护模式的概念。为了与过去兼容，以前的模式被成为实模式。80386的数据总线扩展到32位，但仍然保留了段寄存器16位，80386以后的处理器统称为IA32 (32bit Intel Architecture)。 IA32寄存器简介 通用寄存器： EAX，EBX，ECX，EDX，EBP，ESP，ESI，EDI，8个通用寄存器是8086寄存器的超集，可以拆开来用，他们的低位部分被当成8个16位寄存器，AX，BX……DI，AX……BX还可以继续分为8个8位寄存器，AH、AL……DH、DL。 段寄存器： 16位，保存的不是段的基地址，而是某个段的选择符，段基地址存放在描述符表中。 指令指针寄存器和标志寄存器： 指令指针寄存器EIP中存放下一条将要执行的指令的偏移量，这个偏移量是相对于代码段寄存器CS而言的。偏移量加段基地址就是下一条指令的地址。标志寄存器EFLAGS很多与16位FLAGS相同。 控制寄存器： 80386有4个32位控制寄存器： CR0中主要介绍0位和31位，PE（Protected Enable）和PG（PaGing enable）。 PG PE 工作方式 0 0 实模式，8080操作 0 1 保护模式，但不允许分页 1 0 出错（权限大小倒置） 1 1 允许分页的保护模式 CR1未定义。 CR2页故障线性地址寄存器，保存最后一次出现缺页的全32位线性地址。 CR3是页目录基址寄存器，保存页目录的物理地址。 物理地址、虚拟地址、线性地址 对于操作系统来说，它既需要知道物理内存地址，又需要提供一套程序员使用的与硬件无关的虚拟的内存空间。 主板上的物理内存条所提供的内存空间称为物理内存空间，其中每个内存单元的实际地址称为物理地址；操作系统为程序员提供的与硬件无关的内存空间称为虚拟地址空间（或地址空间），其中的地址称为虚拟地址，通常用“段：偏移量”来描述。 线性地址空间是指一段连续的、不分段的、范围为0～4GB的地址空间，一个线性地址就是线性地址空间中的绝对地址。 地址的转换由内存管理单元（MMU）完成，其功能是把虚拟地址映射为物理地址。MMU是一种硬件电路，有分段和分页两个部分组成。分段机制将虚拟地址转换成线性地址，分页机制将线性地址转换成物理地址。 分段机制","categories":[{"name":"Linux","slug":"Linux","permalink":"http://happylzyy.github.io/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://happylzyy.github.io/tags/Linux/"}]},{"title":"嵌入式系统学习笔记","slug":"embedded-system","date":"2020-06-07T01:20:09.000Z","updated":"2020-06-09T09:00:21.446Z","comments":true,"path":"2020/06/07/embedded-system/","link":"","permalink":"http://happylzyy.github.io/2020/06/07/embedded-system/","excerpt":"","text":"嵌入式系统 HulGodhel 于2020.06.07 第一章 嵌入式系统概论 无所不在的嵌入式系统 计算机将变的小巧玲珑，藏身于任何地方，又消失在任何地方;功能强大，无影无踪。 嵌入式系统举例 汽车控制系统。 嵌入式的展现形式 功能越来越复杂 硬件功能越来越复杂 软件编写工作量越来越大 因此，需要有一种新的驾驭硬件的软件编程规范。 举例：遥测和遥信 遥测（遥测信息）：远程测量。采集并传送运行的参数。 遥信（遥信信息）：远程信号。采集并传送各种开关量信息。 什么叫嵌入？ 原意：“紧紧地埋入、镶入” 狭义：宿主、寄主 嵌入式系统的概念 从技术的角度定义：以应用为中心，以计算机技术为基础，软件硬件可裁剪，适应应用系统对功能，可靠性，成本，体积，工号严格要求的专用计算机系统。 从系统的角度定义：嵌入式系统是设计完成复杂功能的硬件和软件，并使其紧密耦合在一起的计算机系统。术语嵌入式反映了这些系统通常是更大系统中的一个完整的部分称为嵌入的系统。嵌入的系统中可以共存多个嵌入式系统。 即使不可见，嵌入式系统也无处不在。嵌入式系统应用在工业自动化、国防、运输和航天领域中。例如神舟飞船和长征火箭中有很多嵌入式系统，导弹的制导系统也是嵌入式系统，高档汽车中有多大几十个嵌入式系统。 在日常生活中，人们使用各种嵌入式系统，但未必知道它们。事实上，几乎所有带一点“智能”的家电（全自动洗衣机、电脑电饭煲等）都是嵌入式系统。 嵌入式系统的应用领域 交通管理、信息家电、智能玩具、机器人、军事电子、通信设备、网络设备、移动计算、医疗仪器、电子商务、环境监测、汽车电子、智能仪器、工控设备等等。 嵌入式系统与单片机系统的区别 嵌入式系统不等于单片机系统 目前嵌入式系统的主流是以32位嵌入式微处理器为核心的硬件设计和基于实时操作系统（RTOS）的软件设计。 单片机系统多为4位、8位、16位机，不适合运行操作系统，难以进行较为复杂的运算和处理功能。 嵌入式系统强调基于平台的设计，软硬件协同设计，单片机大多采用软硬件流水设计。 嵌入式系统设计的核心是软件设计（大概占70%），单片机系统软硬件设计所占比例基本相同。 学习方法上的不同 单片机学习一般从硬件入手，从硬件体系结构、汇编语言到硬件设计、软件设计。 嵌入式系统可以从软件入手，从应用层编程到操作系统移植，硬件平台设计较好，按单片机设计的流程较难掌握。 嵌入式系统不等于PC机 嵌入式系统一般是专用系统，而计算机是通用计算平台 嵌入式系统的资源比PC少的多 嵌入式系统的软件故障带来的后果比PC机大的多 嵌入式系统一般采用实时操作系统 嵌入式系统大多有成本、功耗要求 嵌入式系统得到多种微处理体系的支持 嵌入式系统需要专用的开发工具 实时操作系统 实时操作系统定义 POSIX 1003.b 定义（一个用于实时编程的标准） 实时操作系统：能够在限定响应时间内提供所需水平服务的计算机系统 一般性定义 一个实时系统是指计算的正确性不仅取决于程序的逻辑性，也取决于结果产生的时间，如果系统的时间约束条件得不到满足，将会发生系统出错。 注意：实时并不等于快！他是一个相对的概念，确切定义应该是“及时”，即在系统允许的时间范围内完成任务。 实时系统衡量指标 响应时间 吞吐量 生存时间 实时性 从广义概念上讲，嵌入式系统都可以看成是一个实时系统。 优缺点 优点：设计和扩展变得容易，使应用程序的设计过程大为简化。 缺点：嵌入式实时操作系统需要额外的ROM/RAM开销，2~5%的CPU额外负荷以及内核的费用。 嵌入式的特征 技术密集：嵌入式系统是计算机技术、微电子技术和行业技术相结合的产物。 成本敏感：嵌入式产品每一批次的产品数量大，单位成本对产品的市场前景和利润影响极大。 专用紧凑：嵌入式系统在体积、功耗、配置、处理能力、电磁兼容性等方面有明显的应用约束。 开发困难：无法直接在目标机上开发，需要宿主机和目标机之间建立连接，进行交叉开发。 安全可靠：可靠性要求极高，网络信息安全，防危安全 不可垄断：嵌入式是个分散的工业，没有哪个系列的处理器和操作系统能够垄断全部市场。 多种多样：嵌入式处理器种类繁多，外设随应用领域变化，操作系统五花八门，嵌入式开发工具不一，嵌入式系统实时性多样化，应用领域广泛。 及时响应：嵌入式系统需要实时性保障，能够尽可能快的对外部技术过程的请求发出响应，及时完成。 其他：确定性 任务个数确定 每个任务执行时序确定 每个任务所占资源等确定 任务间通信延迟确定 发展历程 处理器集成度越来越高，RTOS功能越来越强大，嵌入式中间件迅速发展，开发环境逐渐完善，应用领域覆盖完全。 萌芽阶段 工业应用、军事应用 检测、伺服、指示功能 汇编语言 无操作系统 单芯片可编程控制器 简单系统阶段 家电、医疗、仪器仪表、通信 简单工具，xray，无gui 汇编语言 无OS，VRTX 8位MCUDSP RTOS阶段 消费电子、手机、汽车电子等等 GUI、网络、文件系统等等 汇编、C、C++ 32位嵌入式处理器 网络化阶段 智能家电、联网设备、无线终端等等 Internet、流媒体、数据库 Soc芯片、多核 分类 按处理器位数划分：4、8、16、32、64位系统 按应用类别划分： 按系统的实时性划分 硬实时 汽车的ABS和安全气囊系统、飞行控制系统、核电站控制系统 软实时 电视信号、证券交易 自适应实时 自动调整满足环境需要，保证性能级别 按工业界应用的复杂程度划分 简单单处理器系统 可扩展单处理器系统 复杂嵌入式系统 制造或过程控制中使用的计算机控制系统 第二章 操作系统 存在的问题 各种逻辑分析、关系处理复杂，难度大 功能任务与逻辑判断混杂缠绕 能否只编写功能任务代码？ 计算机操作系统 操作系统是一种为应用程序提供服务的系统软件，是一个完整计算机系统的有机组成部分。 从层次上看，操作系统位于计算机硬件之上，应用软件之下，所以也把它叫做应用软件的运行平台。 计算机硬件系统、操作系统、系统软件、应用软件 计算机操作系统的作用 它在计算机应用程序与计算机硬件之间，屏蔽了计算机硬件工作的一些细节，并对系统中的资源进行有效的管理。 通过提供函数（应用程序接口，API），从而使应用程序的设计人员得以在一个友好的平台上进行应用程序的设计和开发，大大地提高了应用程序的开发效率。 操作系统：用汇编语言编写的硬件抽象层，高级语言接口 从用户角度来看，它就是一大堆函数（API和系统函数），用户可以调用（普通调用或系统调用）它们来对系统资源进行操作。 操作系统的功能 任务管理：任务表 存储管理：存储分配表 文件管理：文件目录 处理器的管理 网络和通信管理 I/O设备管理：设备表 总之，需要一大堆表。 操作系统中经常使用的数据结构 数组 同一数据类型数据的集合 占用连续内存空间 其中所有元素名称相同，但每个元素都有一个编号 元素名去掉编号（下标），得到的是数组名，数组名是个指针 使用上的特点 分类存放 检索速度快、恒定 占用连续空间大 用于记录同类事物的表 位图 位图是数组的一种特殊应用，记录事物的状态。 应用于登记表 结构体 不同类型数据的集合 占用连续内存空间 使用上的特点 不分类存放，但用来描述同一事物 检索速度快且恒定 应用于通讯录中的一条记录、工具箱、厨房等等 链表 同类型数据的集合 不占用连续的内存空间 使用上的特点 分类存放，但空间上不连续（不需要大量的连续存储空间） 检索速度慢，且耗费时间不固定 应用于存放大量的较大的表，类似档案柜 队列 按照先进先出的规则组织的数据结构，可以用数组实现也可以用链表实现 主要用于对象的排队 堆栈 按照先进后出的规则组织的数据结构，主要用数组实现 主要用于程序模块的嵌套运行 什么是多任务操作系统 简单地说，就是能用一个处理器并发（注意不是同时！！）地运行多个程序的计算机管理系统。 并发 由同一个处理器轮换地运行多个程序。或者说是由多个程序轮班地占用处理器这个资源。且在占用这个资源的期间，并不一定能够把程序运行完毕。 程序的切换 PC（程序计数器）是个指路器，它指向哪儿，处理器就去哪儿，所以，哪个程序占用了PC，哪个程序就占用了CPU。 所谓的切换就是将目标程序的地址存入PC中。 不同的计算机类型指令是不同的。 数据传送指令 子程序返回指令（由堆栈弹出） 中断服务程序返回指令（由堆栈弹出） 综上，系统是通过把待运行程序的地址赋给程序计数器PC来实现程序的切换。 嵌入式操作系统 概述 计算机系统由硬件和软件组成，在发展初期没有操作系统这个概念，用户使用监控程序来使用计算机。随着计算机技术的发展，计算机系统的硬件、软件资源也愈来愈丰富，监控程序已不能适应计算机应用的要求。于是在六十年代中期监控程序又进一步发展形成了操作系统(Operating System)。发展到现在，广泛使用的有三种操作系统即多道批处理操作系统、分时操作系统以及实时操作系统。 多道批处理系统：适用于计算中心等较大的计算机系统 分时操作系统：适用于多个用户共享系统资源 实时操作系统：适用于嵌入式设备和有实时性要求的系统中 嵌入式系统的基本结构 嵌入式系统硬件组成 嵌入式系统软件组成 实时操作系统的特点 IEEE 的实时UNIX分委会认为实时操作系统应具备以下的几点: 异步的事件响应 切换时间和中断延迟时间确定 优先级中断和调度 抢占式调度 内存锁定 连续文件 同步 总的来说实时操作系统是事件驱动的，能对来自外界的作用和信号在限定的时间范围内作出响应。它强调的是实时性、可靠性和灵活性, 与实时应用软件相结合成为有机的整体起着核心作用, 由它来管理和协调各项工作,为应用软件提供良好的运行软件环境及开发环境。 从实时系统的应用特点来看实时操作系统可以分为两种：一般实时操作系统和嵌入式实时操作系统。 一般实时操作系统应用于实时处理系统的上位机和实时查询系统等实时性较弱的实时系统，并且提供了开发、调试、运用一致的环境。 嵌入式实时操作系统应用于实时性要求高的实时控制系统，而且应用程序的开发过程是通过交叉开发来完成的，即开发环境与运行环境是不一致。嵌入式实时操作系统具有规模小(一般在几K～几十K 内)、可固化使用实时性强(在毫秒或微秒数量级上)的特点 。 基本概念 前后台系统 对基于芯片的开发来说，应用程序一般是一个无限的循环，可称为前后台系统或超循环系统。 很多基于微处理器的产品采用前后台系统设计，例如微波炉、电话机、玩具等。在另外一些基于微处理器应用中，从省电的角度出发，平时微处理器处在停机状态，所有事都靠中断服务来完成。 操作系统 操作系统是计算机中最基本的程序。操作系统负责计算机系统中全部软硬资源的分配与回收、控制与协调等并发的活动；操作系统提供用户接口，使用户获得良好的工作环境；操作系统为用户扩展新的系统功能提供软件平台。 实时操作系统 实时操作系统是一段在嵌入式系统启动后首先执行的背景程序，用户的应用程序是运行于RTOS之上的各个任务，RTOS根据各个任务的要求，进行资源(包括存储器、外设等)管理、消息管理、任务调度、异常处理等工作。在RTOS支持的系统中， 每个任务均有一个优先级，RTOS根据各个任务的优先级，动态地切换各个任务，保证对实时性的要求。 代码临界区 代码的临界区也称为临界区，指处理时不可分割的代码，运行这些代码不允许被打断。一旦这部分代码开始执行，则不允许任何中断打入（这不是绝对的，如果中断不调用任何包含临界区的代码，也不访问任何临界区使用的共享资源，这个中断可能可以执行）。为确保临界区代码的执行，在进入临界区之前要关中断，而临界区代码执行完成以后要立即开中断。 资源 程序运行时可使用的软、硬件环境统称为资源。资源可以是输入输出设备，例如打印机、键盘、显示器。资源也可以是一个变量、一个结构或一个数组等。 共享资源 可以被一个以上任务使用的资源叫做共享资源。为了防止数据被破坏，每个任务在与共享资源打交道时，必须独占该资源，这叫做互斥。 任务 一个任务，也称作一个线程，是一个简单的程序，该程序可以认为CPU完全属于该程序自己。实时应用程序的设计过程，包括如何把问题分割成多个任务，每个任务都是整个应用的某一部分，每个任务被赋予一定的优先级，有它自己的一套CPU寄存器和自己的栈空间。 任务切换 当多任务内核决定运行另外的任务时，它保存正在运行任务的当前状态，即CPU寄存器中的全部内容。这些内容保存在任务的当前状态保存区，也就是任务自已的栈区之中。入栈工作完成以后，就把下一个将要运行的任务的当前状态从任务的栈中重新装入CPU的寄予存器，并开始下一个任务的运行。这个过程就称为任务切换。这个过程增加了应用程序的额外负荷。CPU的内部寄存器越多，额外负荷就越重。做任务切换所需要的时间取决于CPU有多少寄存器要入栈。 内核 多任务系统中，内核负责管理各个任务，或者说为每个任务分配CPU时间，并且负责任务之间的通信。内核提供的基本服务是任务切换。使用实时内核可以大大简化应用系统的设计，是因为实时内核允许将应用分成若干个任务，由实时内核来管理它们。内核需要消耗一定的系统资源，比如2％～5％的CPU运行时间、RAM和ROM等。 内核提供必不可少的系统服务，如信号量、消息队列、延时等。 调度 调度是内核的主要职责之一。调度就是决定该轮到哪个任务运行了。多数实时内核是基于优先级调度法的。每个任务根据其重要程度的不同被赋予一定的优先级。基于优先级的调度法指CPU总是让处在就绪态的优先级最高的任务先运行。然而究竟何时让高优先级任务掌握CPU的使用权，有两种不同的情况，这要看用的是什么类型的内核，是非占先式的还是占先式的内核。 非占先式内核 非占先式内核要求每个任务自我放弃CPU 的所有权。非占先式调度法也称作合作型多任务，各个任务彼此合作共享一个CPU。异步事件还是由中断服务来处理。中断服务可以使一个高优先级的任务由挂起状态变为就绪状态。但中断服务以后控制权还是回到原来被中断了的那个任务，直到该任务主动放弃CPU的使用权时，那个高优先级的任务才能获得CPU的使用权。 占先式内核 当系统响应时间很重要时，要使用占先式内核。因此绝大多数商业上销售的实时内核都是占先式内核。最高优先级的任务一旦就绪，总能得到CPU的控制权。当一个运行着的任务使一个比它优先级高的任务进入了就绪状态，当前任务的CPU使用权就被剥夺了，或者说被挂起了，那个高优先级的任务立刻得到了CPU的控制权。如果是中断服务子程序使一个高优先级的任务进入就绪态，中断完成时，中断了的任务被挂起，优先级高的那个任务开始运行。 任务优先级 任务的优先级是表示任务被调度的优先程度。每个任务都具有优先级。任务越重要，赋予的优先级应越高，越容易被调度而进入运行态。 中断 ​ 中断是一种硬件机制，用于通知CPU有个异步事件发生了。中断一旦被识别，CPU保存部分（或全部）上下文即部分或全部寄存器的值，跳转到专门的子程序，称为中断服务子程序（ISR）。中断服务子程序做事件处理，处理完成后，程序回到： 在前后台系统中，程序回到后台程序 对非占先式内核而言，程序回到被中断了的任务 对占先式内核而言，让进入就绪态的优先级最高的任务开始运行 时钟节拍 ​ 时钟节拍是特定的周期性中断。这个中断可以看作是系统心脏的脉动。中断之间的时间间隔取决于不同应用，一般在10ms到200ms之间。时钟的节拍式中断使得内核可以将任务延时若干个整数时钟节拍，以及当任务等待事件发生时，提供等待超时的依据。时钟节拍率越快，系统的额外开销就越大。 使用实时操作系统的必要性 嵌入式实时操作系统在目前的嵌入式应用中用得越来越广泛，尤其在功能复杂、系统庞大的应用中显得愈来愈重要。在嵌入式应用中，只有把CPU嵌入到系统中，同时又把操作系统嵌入进去，才是真正的计算机嵌入式应用。使用实时操作系统主要有以下几个因素： 嵌入式实时操作系统提高了系统的可靠性。 提高了开发效率，缩短了开发周期。 嵌入式实时操作系统充分发挥了32位CPU的多任务潜力。 实时操作系统的优缺点 优点：在嵌入式实时操作系统环境下开发实时应用程序使程序的设计和扩展变得容易，不需要大的改动就可以增加新的功能。通过将应用程序分割成若干独立的任务模块，使应用程序的设计过程大为简化；而且对实时性要求苛刻的事件都得到了快速、可靠的处理。通过有效的系统服务，嵌入式实时操作系统使得系统资源得到更好的利用。 缺点：使用嵌入式实时操作系统需要额外的ROM/RAM开销，2~5%的CPU额外负荷，以及内核的费用。 常见的嵌入式操作系统 嵌入式Linux uClinux是一个完全符合GNU/GPL公约的操作系统，完全开放代码。uClinux从Linux 2.0/2.4内核派生而来，沿袭了主流Linux的绝大部分特性。它保留了Linux的大部分优点： 稳定、良好的移植性、优秀的网络功能、完备的对各种文件系统的支持、以及标准丰富的API等。 WinCE Windows CE是微软开发的一个开放的、可升级的32位嵌入式操作系统，Win CE不仅继承了传统的Windows图形界面，并且在Win CE平台上可以使用Windows 95/98上的编程工具（如Visual Basic、Visual C++等）、使绝大多数的应用软件只需简单的修改和移植就可以在Windows CE平台上继续使用。 VxWorks VxWorks操作系统是美国WIND RIVER公司于1983年设计开发的一种嵌入式实时操作系统（RTOS），是嵌入式开发环境的关键组成部分。良好的持续发展能力、高性能的内核以及友好的用户开发环境，在嵌入式实时操作系统领域占据一席之地。它以其良好的可靠性和卓越的实时性被广泛地应用在通信、军事、航空、航天等高精尖技术及实时性要求极高的领域中，如卫星通讯、军事演习、弹道制导、飞机导航等，甚至在1997年4月登陆火星表面的火星探测器上也使用到了VxWorks。 OSE OSE主要是由ENEA Data AB 下属的ENEA OSE Systems AB负责开发和技术服务的，一直以来都充当着实时操作系统以及分布式和容错性应用的先锋，并保持良好的发展态势。 OSE的客户深入到电信，数据，工控，航空等领域，尤其在电信方面，该公司已经有了十余年的开发经验，同诸如爱立信，诺基亚，西门子等知名公司确定了良好的关系。 Nucleus Nucleus PLUS是为实时嵌入式应用而设计的一个抢先式多任务操作系统内核，其95％的代码是用ANSI C写成的，因此非常便于移植并能够支持大多数类型的处理器。 Nucleus PLUS采用了软件组件的方法。每个组件具有单一而明确的目的，通常由几个C及汇编语言模块构成，提供清晰的外部接口，对组件的引用就是通过这些接口完成的。由于采用了软件组件的方法，使Nucleus PLUS 的各个组件非常易于替换和复用。 eCos eCos是RedHat公司开发的源代码开放的嵌入式RTOS产品，是一个可配置、可移植的嵌入式实时操作系统，设计的运行环境为RedHat的GNUPro和GNU开发环境。eCOS的所有部分都开放源代码，可以按照需要自由修改和添加。eCOS的关键技术是操作系统可配置性，允许用户组和自己的实时组件和函数以及实现方式，特别允许eCOS的开发则定制自己的面向应用的操作系统，使eCos能有更广泛的应用范围。 μC/OS-II μC/OS-II是一个源码公开、可移植、可固化、可裁剪、占先式的实时多任务操作系统。其绝大部分源码是用ANSI C写的，使其可以方便的移植并支持大多数类型的处理器。μC/OS-II通过了联邦航空局（FAA）商用航行器认证。自1992年问世以来，μC/OS-II已经被应用到数以百计的产品中。μC/OS-II占用很少的系统资源，并且在高校教学使用是不需要申请许可证。 Android Android是一种基于Linux的自由及开放源代码的操作系统，主要使用于移动设备，由Google公司和开放手机联盟领导及开发。Android操作系统最初由Andy Rubin开发，主要支持手机。2005年8月由Google收购注资。2007年11月，Google与84家硬件制造商、软件开发商及电信营运商组建开放手机联盟共同研发改良Android系统。随后Google以Apache开源许可证的授权方式，发布了Android的源代码。 iOS IOS是苹果公司开发的类Unix商业操作系统，于2007年1月9日的Macworld大会上公布。 ulTRON TRON明确的设计目标使其甚至比Linux更适合于做嵌入式应用，内核小，启动速度快，即时性能好，也很适合汉字系统的开发。另外，TRON的成功还来源于如下两个重要的条件： 1. 它是免费的 2. 它已经建立了开放的标准，形成了较完善的软硬件配套开发环境，较好地形成了产业化 GNU计划 有译为“革奴计划”，是由理查德·斯托曼在1983年9月27日公开发起的，它的目标是创建一套完全自由的操作系统。 GNU是“GNU’s Not UNIX”的缩写，斯托曼宣布GNU应当发音为“Guh-NOO”（/ˈgnuː/ ） 不论目的为何，可以自由使用该种软件。 研究该软件如何运作的自由，并且得以改写该软件来符合使用者自身的需求，取得该软件之源码为达成此目的之前提。 重新散布该软件的自由。 有改善再利用该软件的自由，并且可以发表改写版供公众使用，如此一来，整个社群都可以受惠，如前项，取得该软件之源码为达成此目的之前提。 μC/OS-II微小内核分析 概述 μC/OS-II微小内核简介 μC/OS-II 嵌入式实时操作系统的源代码可以分成三部分： 与硬件无关的内核代码 与处理器有关的移植代码 用户配置文件 内核代码 内核代码位于source目录下，提供了4个微小内核。它们分别位于source\\SOURCE1（包含建立任务和延时功能）、source\\SOURCE2（增加删除任务功能）、source\\SOURCE3（增加信号量文件）和source\\SOURCE4（增加删除信号量功能）。它们的功能依次增强，代码也依次增大。 以上代码并没有完全裁减到最小，还包含了一些参数校验代码等非必需代码，μC/OS-II的代码裁减功能也同时保留，这些代码大约50多行。 移植代码 移植代码分别为OS_CPU_C.C（移植代码C语言部分）、OS_CPU_a.S（移植代码汇编语言部分）、OS_CPU.H（移植代码头文件）和IRQ.INC（移植代码与芯片无关的中断处理接口程序）4个文件。 配置文件 配置文件是每个μC/OS-II程序必备的文件，而且不同的程序一般不一样，但大小基本上相同。配置文件范例位于H目录下，分别为INCLUDES.H（内核需要的头文件，对于特定的移植，一般不需要改变）和OS_CFG.H（内核配置的头文件，一般需要根据程序的需求修改其常量的内容）文件。 一般来说，每个应用程序都有自己的配置文件拷贝，并很可能与范例不同。 函数说明 OSInit 函数名称 OSInit 函数原型 void OSInit(void) 功能描述 初始化μC/OS-Ⅱ，无函数参数和返回值 特殊说明 必须在调用OSStart()函数之前调用OSInit()，而只有在调用OSStart()函数之后，μC/OS-Ⅱ才真正开始运行多任务 OSStart 函数名称 OSStart 函数原型 void OSStart(void) 功能描述 启动μC/OS-II的多任务环境，无函数参数和返回值 特殊说明 在调用OSStart( )之前必须先调用OSInit ( )。在用户程序中OSStart( )只能被调用一次，第二次调用OSStart( )将不执行任何操作 #### OSTaskCreate 函数名称 OSTaskCreate 函数原型 INT8U OSTaskCreate (void (*task)(void *pd), void *pdata, OS_STK *ptos, INT8U prio) 功能描述 建立一个新任务。既可以在多任务环境启动之前，也可以在正在运行的任务中创建任务 函数参数 task：指向任务代码的指针（函数指针） pdata：传递给任务的参数(一个变量指针) ptos ：指向任务堆栈栈顶的指针 prio ：任务的优先级 特殊说明 任务堆栈必须声明为OS_STK类型。注意：在中断处理程序中不能建立任务。在任务中必须调用μC/OS提供的下述过程之一：延时等待、任务挂起、等待事件发生（等待信号量，消息邮箱、消息队列），以便其它任务也能获得CPU的使用权 OSTimeDly 函数名称 OSTimeDly 函数原型 void OSTimeDly (INT16U ticks) 功能描述 将一个任务延时若干个时钟节拍，无函数返回值。延时时间的长度可从0到65535个时钟节拍，延时时间0表示不进行延时，函数将立即返回调用者，延时的具体时间依赖于系统每秒钟有多少时钟节拍（由文件OS_CFG…H中的常量OS_TICKS_PER _SEC设定） 函数参数 ticks：要延时的时钟节拍数 特殊说明 延时时间0表示不进行延时操作，而立即返回调用者。为了确保设定的延时时间，建议用户设定的时钟节拍数加1。例如，希望延时10个时钟节拍，可设定参数为11 OSTimeTick 函数名称 OSTimeTick 函数原型 void OSTimeTick(void) 功能描述 在每次时钟节拍中断服务程序中被调用，无函数参数和返回值。OSTimeTick()检查处于延时状态的任务是否达到延时时间，或正在等待事件的任务是否超时 特殊说明 OSTimeTick()的运行时间和系统中的任务数直接相关，在任务或中断中都可以调用。如果在任务中调用，任务的优先级应该很高（优先级数字很小），这是因为OSTimeTick()负责所有任务的延时操作 OSTaskDel 函数名称 OSTaskDel 函数原型 INT8U OSTaskDel (INT8U prio) 功能描述 删除一个指定优先级的任务。被删除的任务将回到休眠状态，任务被删除后可以用函数OSTaskCreate()重新建立 函数参数 prio ：指定要删除任务的优先级，如果为OS_PRIO_SELF则删除自身 函数返回值 OS_NO_ERR：函数调用成功 OS_TASK_DEL_IDLE：错误，试图删除空闲任务（Idle task） OS_TASK_DEL_ ERR：错误，指定要删除的任务不存在 OS_PRIO_INVALID：参数指定的优先级大于OS_LOWEST_PRIO OS_TASK_DEL_ISR：错误，试图在中断处理程序中删除任务 OSIntEnter 函数名称 OSIntEnter 所属文件 OS_CORE.C 函数原型 void OSIntEnter (void) 功能描述 通知μC/OS-Ⅱ一个中断服务已开始执行，这有助于μC/OS-Ⅱ掌握中断嵌套的情况。通常OSIntExit()和OSIntEnter()联合使用，无函数参数和返回值 特殊说明 在中断服务程序中，如果保证直接递增OSIntNesting“原子操作”，中断服务程序使用直接递增OSIntNesting的方法而不调用OSIntEnter()函数 何为原子操作？在一个任务的执行过程中，如果有某些操作不希望在执行过程中被别的任务或中断打断，那么这些不希望被打断的操作就是原子操作 OSIntExit 函数名称 OSIntExit 所属文件 OS_CORE.C 函数原型 void OSIntExit(void) 功能描述 通知μC/OS-Ⅱ一个中断服务已执行完毕，这有助于μC/OS-Ⅱ掌握中断嵌套的情况。通常OSIntExit()和OSIntEnter()联合使用。当最后一层嵌套的中断执行完毕后，如果有更高优先级的任务准备就绪，μC/OS-Ⅱ会调用任务调度函数，在这种情况下，中断返回到更高优先级的任务而不是被中断了的任务。无函数参数和返回值 特殊说明 在任务级不能调用该函数。即使中断服务程序使用直接递增OSIntNesting的方法（没有调用OSIntEnter()），也必须调用OSIntExit()函数 禁止/允许中断函数 函数名称 OS_ENTER_CRITICAL()和OS_EXIT_CRITICAL() 所属文件 移植代码 函数原型 由移植代码决定 功能描述 一般来说，OS_ENTER_CRITICAL()和OS_EXIT_CRITICAL()为定义的宏，用来禁止、打开CPU的中断，无函数参数和返回值 特殊说明 OS_ENTER_CRITICAL()和OS_EXIT_CRITICAL()必须成对使用 OSSemCreate 函数名称 OSSemCreate 所属文件 OS_SEM.C 函数原型 OS_EVENT *OSSemCreate (INT16U cnt) 功能描述 建立并初始化一个信号量 函数参数 cnt ：建立的信号量的初始值，可以取0到65535之间的任何值 函数返回值 正常 ： 指向分配给所建立的信号量的事件控制块的指针 NULL ：没有可用的事件控制块 特殊说明 必须先建立信号量，然后使用 OSSemPend 函数名称 OSSemPend 所属文件 OS_SEM.C 函数原型 void OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *err) 功能描述 等待信号量：当任务调用OSSemPend()函数时，如果信号量的值大于零，那么OSSemPend()函数对该值减一并返回：如果调用时信号量等于零，那么OSSemPend()函数将任务加入该信号量的等待列表，任务将等待直到获得信号量或超时 函数参数 cnt ：建立的信号量的初始值，可以取0到65535之间的任何值 特殊说明 必须先建立信号量，然后使用，不允许在中断中调用该函数， 因为中断不能被挂起 OSSemPost 函数名称 OSSemPost 所属文件 函数原型 INT8U OSSemPost (OS_EVENT *pevent) 功能描述 发送信号量：如果指定的信号量是零或大于零，OSSemPost（）函数递增该信号量并返回。如果有任务在等待信号量，则最高优先级的任务将得到信号量并进入就绪状态。然后进行任务调度，决定当前运行的任务是否仍然为处于最高优先级的就绪态的任务 函数参数 pevent ：指向信号量的指针，OSSemCreate()的返回值 函数返回值 OS_NO_ERR ：发送信号量成功 OS_SEM_OVF ：信号量的值溢出 OS_ERR_EVENT_TYPE ：pevent 不是指向信号量的指针 OS_ERR_PEVENT_NULL ：错误，pevent为NULL 特殊说明 必须先建立信号量，然后使用 OSSemDel 函数名称 OSSemDel 所属文件 OS_SEM.C 函数原型 OS_EVENT *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *err) 功能描述 删除信号量：在删除信号量之前，应当删除可能会使用这个信号量的任务 函数参数 pevent：指向信号量的指针，OSSemCreate()的返回值 opt：定义信号量删除条件 －OS_DEL_NO_PEND：没有任何任务等待信号量才删除 －OS_DEL_ALWAYS：立即删除 err：用于返回错误码 特殊说明 (1)使用这个函数调用时，必须特别小心，因为其它任务可能还要用这个信号量 (2)当挂起任务就绪时，中断关闭时间与挂起任务数目有关 (3)其它任务并不知道信号量被删除，除非检查pevent是否指向NULL 最小内核 什么是任务 在实时多任务系统下运行的应用软件程序就是任务。在没有使用OS的前后台系统中，我们可以认为main函数以及通过main函数调用的全体函数为一个任务。 通常将“并行程序执行的基本逻辑单位”称之为“任务”，也就是说任务是可以被分割为独立的且可并行执行的基本逻辑单位程序。一个任务的程序是顺序执行的，而不同任务的程序却是并行执行的。任务必须包括相互“独立”和“并行”执行两个方面。 独立 独立具体指任务不能彼此直接调用，也不能直接进行数据交换。通过内核进行任务调度和数据交换。 #### 并行执行 想象相互独立的任务各自拥有一个CPU，每个CPU各自执行各自的任务，此即任务的并行执行。但实际上CPU只有一个，我们认为操作系统为每个任务虚拟了一个CPU。 #### 任务的状态 在μC/OS-Ⅱ中，任务有5种状态，分别为睡眠状态、就绪状态、运行状态、等待状态和被中断状态。 任务控制快 μC/OS-Ⅱ是通过任务控制块来管理任务的。任务控制块是一个基于链表的数据结构，任务控制块主要用于记录任务的堆栈栈顶指针、指向下一个任务控制块的指针、任务等待的延迟时间、任务的当前状态标志与任务的优先级别等一些与任务管理有关的属性。 当任务的CPU使用权被剥夺时，μC/OS-Ⅱ用任务控制块来保存该任务的状态，从而保证任务重新获得CPU使用权时从断点处执行。 任务就绪算法 所谓就绪状态是指任务准备运行但CPU没空，任务等待运行的状态。 任务就绪算法涉及“任务就绪表OSRdyTbl、映射表OSMapTbl、优先级判定表OSUnMapTbl以及变量OSRdyGrp和相关的任务优先级prio”，其中映射表OSMapTbl和优先级判定表OSUnMapTbl是2个常数表，用于查表算法。 OS初始化 μC/OS-II必须通过函数OSInit()初始化后才可以使用，该函数仅调用OS_InitMisc()、OS_InitRdyList()、OS_InitTCBList()和OS_InitTaskIdle() 4个函数。 任务管理 μC/OS-Ⅱ通过任务控制块对任务进行管理，创建任务实际上就是给任务代码分配一个任务控制块，通过调用函数OSTaskCreate()实现。 任务可以在多任务调度开始前建立，也可以在其它任务的执行过程中建立。在开始多任务调度之前，用户必须至少创建一个任务，但任务不能在中断服务程序（ISR）中建立。 临界区与中断管理 任务的结束 信号量 删除信号量","categories":[{"name":"嵌入式系统","slug":"嵌入式系统","permalink":"http://happylzyy.github.io/categories/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/"}],"tags":[{"name":"Embedded","slug":"Embedded","permalink":"http://happylzyy.github.io/tags/Embedded/"}]},{"title":"Git 学习笔记","slug":"git","date":"2020-06-06T06:00:00.000Z","updated":"2020-06-06T15:31:07.533Z","comments":true,"path":"2020/06/06/git/","link":"","permalink":"http://happylzyy.github.io/2020/06/06/git/","excerpt":"","text":"Git 学习 HulGodhel 于2020.04.24 从何而来 Linux 之父 Linus 在 1991 年创建开源的 Linux 操作系统之后，多年来依靠全世界广大热心志愿者的共同建设，经过长足发展，现已成为世界上最大的服务器系统。系统创建之初，代码贡献者将源码文件发送给 Linus，由其手动合并。这种方式维持多年后，代码量已经庞大到人工合并难以为继，于是深恶集中式版本控制系统的 Linus 选择了一个分布式商业版本控制系统 BitKeeper，不过 Linux 社区的建设者们可以免费使用它。BitKeeper 改变了 Linus 对版本控制的认识，同时 Linus 发现 BitKeeper 有一些不足，而且有个关键性的问题使之不能被广泛使用，就是不开源。 在 2005 年，BitKeeper 所在公司发现 Linux 社区有人企图破解它，BitKeeper 决定收回 Linux 社区的免费使用权。Linus 对此事调节数周无果，找遍了当时已知的各种版本控制系统，没有一个看上眼的，一怒之下决定自己搞一个。Linus 花了十天时间用 C 语言写好了一个开源的版本控制系统，就是著名的 Git。 2007 年旧金山三个年轻人觉得 Git 是个好东西，就搞了一个公司名字叫 GitHub，第二年上线了使用 Ruby 编写的同名网站 GitHub，这是一个基于 Git 的免费代码托管网站（有付费服务）。十年间，该网站迅速蹿红，击败了实力雄厚的 Google Code，成为全世界最受欢迎的代码托管网站。2018 年 6 月，GitHub 被财大气粗的 Microsoft 收购。2019 年 1 月 GitHub 宣布用户可以免费创建私有仓库。根据 2018 年 10 月的 GitHub 年度报告显示，目前有 3100 万开发者创建了 9600 万个项目仓库，有 210 万企业入驻。 Git是一个功能强大的分布式版本控制系统。 怎么安装 Linux环境 Linux环境下大多自带Git软件包，如果没有自带，可以通过软件包管理器安装。 我使用的系统发行版是Arch Linux，软件包管理器是pacman，对应的安装命令为sudo pacman -S git. 不同的发行版使用的软件包管理器可能不同： openSUSE sudo zypper install git Debian/Ubuntu sudo apt-get install git CentOS/Fedora sudo yum -i git Windows环境 到Git官网下载Git for Windows安装即可。 MacOS环境 其实跟Linux环境差不多，大多自带Git，如果嫌自带Git版本太低，可以通过HomeBrew项目安装。 基本操作 查看Git 版本 git --version 克隆仓库 git clone [仓库地址] Git 仓库的三大区域 Git本地仓库有三个区域：工作区、暂存区、版本区。 查看仓库的状态 在仓库的主目录下执行命令git status。 添加修改到暂存区 增加新文件git add [文件名]。 如果对多个文件或目录进行了增删改，可以用命令git add .。 注意到，对目录内的文件进行更改，是对工作区的修改，而add命令是将修改添加到暂存区。 撤销暂存区的修改 暂存区记录了修改，当然可以撤销，使用命令git reset -- [文件名]或git rm --cached [文件名]。 如果命令不带文件名，则默认撤销暂存区所有更改。 查看修改详情 git diff查看工作区更改。 git diff --cached查看暂存区的全部更改。 查看版本区的提交历史记录 git log git log [分支名]查看某分支的提交历史，不写分支名即默认查看当前所在分支。 git log --oneline一行显示提交历史。 git log -n显示最近的n个提交。 git log --author [贡献者名字] 查看指定贡献者的提交记录。 git log --graph图示法显示提交历史。 git log --reverse 倒序查看提交记录。 提交暂存区的修改 执行git commit命令生成一个新的提交，必须带选项-m用来提供该提交的备注。 查看分支信息 git branch -avv可以用来查看全部的分支信息。 将新增提交推送到远程仓库 git push 版本回退 执行git reset --soft HEAD^可以撤销最近的一次提交，将修改还原到暂存区。 --soft表示软退回，--hard表示硬退回。 HEAD^表示撤销一次提交，每加一个^,倒退一个版本。HEAD~n表示退回n个版本。 版本回退之后再次提交的版本会与远程仓库版本冲突（提交时间线分叉），这种情况下也可以将本地推送到远程仓库，需要加-f选项。 基于commit ID 的回退git reset --hard [ID]。 本地仓库的变化记录 git reflog可以查看本地仓库的每一次版本变化，可以通过commit ID回到任何位置。(如果不知道ID，可以使用HEAD@&#123;n&#125;回到最近n次提交版本变化前) Git 分支操作 添加SSH关联授权 通过在系统中创建SSH公钥，并将公钥放到GitHub账户中用于本地Git授权。 终端执行ssh-keygen，得到公钥和私钥，位于home目录.ssh文件夹中。 为Git命令设置别名 git config --global alias.[别名] [原命令] 设置的别名可以用git config -l查看。 分支管理 git fetch可以将远程仓库的分支信息拉取到本地仓库（仅仅更新了本地的远程分支信息）。 git pull命令可以将远程仓库的数据拉取到本地。 git rebase origin/master使本地master分支基于远程仓库的master分支。 创建分支 git branch -avv查看本地分支信息。 执行git branch [分支名]可以创建新分支。 git checkout [分支名]切换分支。 git checkout -b [分支名]创建并切换分支。 git push [主机名] [本地分支名]:[远程分支名]将本地分支推送到远程分支。 本地新创建的分支没有跟踪上游分支，git branch --set-upstream [主机名/上游分支名] [本地分支名]创建关联。 解除关联可以用git branch --unset-upstream [分支名]。 推送时即建立关联git push --set-upstream [主机名] [本地分支名]。 删除远程分支有两种方法： git push [主机名]:[远程分支名]原理是将空分支推送到远程分支，结果是删除远程分支。 git push [主机名] --delete [远程分支名] 删除本地分支git branch -D [分支名]。 本地分支改名git branch -m [原分支名] [新分支名]。 GitHub多人协作 忽略文件 .gitignore文件中存放需要忽略的文件，比如缓存文件、备份文件、环境文件等等。该文件可以在建立仓库时由GitHub设置生成。 忽略文件模板:https://github.com/github/gitignore 开源许可证 可以选择自己喜欢的许可证，注意跟法律有关。 三个按钮 Watch：这是一个下拉按钮，可以选择对此仓库关注、不关注、忽略等。 Star：如果觉得这个仓库很好，就点击这个按钮送一颗星，在淘宝提供刷星业务之前，仓库获得的星越多表示该项目越优秀。 Fork：在别人的仓库中点此按钮会克隆一个完全一样的仓库到自己的账号中，包括所有分支、提交等，但不会克隆 issue，当此仓库发生版本变化，不会自动同步到克隆的仓库里，反之亦然。 增加合作者 在仓库设置Manage access中增加合作者用户名，选择正确的用户，发送邀请邮件通知。 添加issue 在组长仓库界面，可以添加一些项目任务或待解决的问题，即issue。可以指派一位或多位项目参与者来完成任务，同时GitHub会给被指派者发邮件提醒。 Git 多人协作 克隆fork仓库 组员将组长的仓库fork一份给自己，然后在本地克隆这个的仓库。 完成任务并推送到自己的仓库 每个issue都有一个编号，当完成任务后，执行提交命令时，备注开头加上fix #n。当组长仓库的commit中出现此字样时，对应的issue将自动关闭。 Pull Request &amp; 检查合并PR Pull Request，即一个分支向另一个分支提出允许合并请求。提PR既可以在仓库内，也可以跨仓库。","categories":[{"name":"Git","slug":"Git","permalink":"http://happylzyy.github.io/categories/Git/"}],"tags":[{"name":"Git","slug":"Git","permalink":"http://happylzyy.github.io/tags/Git/"}]}],"categories":[{"name":"Linux","slug":"Linux","permalink":"http://happylzyy.github.io/categories/Linux/"},{"name":"嵌入式系统","slug":"嵌入式系统","permalink":"http://happylzyy.github.io/categories/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/"},{"name":"Git","slug":"Git","permalink":"http://happylzyy.github.io/categories/Git/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://happylzyy.github.io/tags/Linux/"},{"name":"Embedded","slug":"Embedded","permalink":"http://happylzyy.github.io/tags/Embedded/"},{"name":"Git","slug":"Git","permalink":"http://happylzyy.github.io/tags/Git/"}]}